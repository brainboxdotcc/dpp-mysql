<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>A simple asynchronous MySQL wrapper for D++ bots</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md_README"/> Simply take the source files and add them to your D++ bot project. This is a slightly modified version of what is used in my own bots.</para>
<para>This wrapper supports both synchronous (blocking) API and asynchronous (coroutine) API, alongside callback based async. All queries done through this wrapper use cached prepared statements, this will consume a very small amount of ram for a sometimes drastic increase in performance.</para>
<para>It is thread safe, however be aware that different threads may run queries that may intrude into other threads transactions. If you need ACID transaction safety, you should only use <computeroutput><ref refid="namespacedb_1a7cba5870abb1d49fe0f9fe17dd8ef15f" kindref="member">db::co_transaction()</ref></computeroutput> or <computeroutput><ref refid="namespacedb_1a2b4f92b15fde6491a19818b96b0d79d9" kindref="member">db::transaction()</ref></computeroutput> and ensure all queries within use <computeroutput><ref refid="namespacedb_1a8e64d322c430542846327f26e9d00ff6" kindref="member">db::query()</ref></computeroutput>.</para>
<para>No support is offered for this software at present. Your mileage may vary. I have only ever used this wrapper on Linux.</para>
<para><bold>Detecting and linking the dependencies (libmysqlclient.so etc) is currently your responsibility. No package mangagement or build script is provided.</bold></para>
<sect1 id="index_1autotoc_md1">
<title>Documentation</title>
<para>Doxygen documentation can be found on <ulink url="https://brainboxdotcc.github.io/dpp-mysql/">github pages</ulink>. It can be re-generated by running &apos;doxygen&apos;</para>
</sect1>
<sect1 id="index_1autotoc_md2">
<title>Dependencies</title>
<para><itemizedlist>
<listitem><para>libmysqlclient-dev</para>
</listitem><listitem><para>D++</para>
</listitem><listitem><para>fmtlib</para>
</listitem><listitem><para>A C++ compiler capable of building D++ bots with coroutine support, if you want to use the asynchronous interface</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md3">
<title>Documentation</title>
<para>All functions in the <computeroutput>db</computeroutput> namespace have Doxygen comment blocks.</para>
</sect1>
<sect1 id="index_1autotoc_md4">
<title>Using the wrapper</title>
<sect2 id="index_1autotoc_md5">
<title>Simple Queries</title>
<para>This is an example of using the asynchronous interface:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;database.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconfig_1a3b6fc04da34bbdb59ec978612c865538" kindref="member">config::init</ref>(</highlight><highlight class="stringliteral">&quot;config.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dpp::cluster<sp/>bot(<ref refid="namespaceconfig_1abda9d2a5f8aaf27890a20b26c1cd2f10" kindref="member">config::get</ref>(</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dpp::ready_t&amp;<sp/>event)<sp/>-&gt;<sp/>dpp::task&lt;void&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/>co_await<sp/><ref refid="namespacedb_1af873c3dbbe3724ee0e31953ade03f2bd" kindref="member">db::co_query</ref>(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>*<sp/>FROM<sp/>bigtable<sp/>WHERE<sp/>bar<sp/>=<sp/>?&quot;</highlight><highlight class="normal">,<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal"><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rs.ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SQL<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rs.error<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>rows<sp/>returned:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rs.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rs.empty())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;First<sp/>row<sp/>&apos;bar&apos;<sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rs[0].at(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedb_1a8a004a2115b829e9f7258f4f65fcbe0b" kindref="member">db::init</ref>(bot);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(dpp::st_wait);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Also create a <computeroutput>config.json</computeroutput> file. To use unix sockets to connect, set the port value to <computeroutput>0</computeroutput> and the hostname value to <computeroutput>localhost</computeroutput>.</para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;token&quot;:<sp/>&quot;discord<sp/>bot<sp/>token&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;database&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;host&quot;:<sp/>&quot;hostname&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;username&quot;:<sp/>&quot;database<sp/>username&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;password&quot;:<sp/>&quot;database<sp/>password&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;database&quot;:<sp/>&quot;schema<sp/>name&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;port&quot;:<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;socket&quot;:<sp/>&quot;/path/to/mysqld.sock&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md6">
<title>Using Transactions</title>
<para>To use transactions, wrap the transaction in the <computeroutput><ref refid="namespacedb_1a2b4f92b15fde6491a19818b96b0d79d9" kindref="member">db::transaction</ref></computeroutput> function, and use only the <computeroutput><ref refid="namespacedb_1a8e64d322c430542846327f26e9d00ff6" kindref="member">db::query</ref></computeroutput> function within it for queries. Return true to commit the transaction, or throw any exception or return false to roll back the transaction.</para>
<para>Note that during a transaction all other queries will be forced to wait until the transaction is completed. Transactions are asynchronous, so use the callback to be notified when it completes, or use co_transaction as below:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;database.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceconfig_1a3b6fc04da34bbdb59ec978612c865538" kindref="member">config::init</ref>(</highlight><highlight class="stringliteral">&quot;config.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dpp::cluster<sp/>bot(<ref refid="namespaceconfig_1abda9d2a5f8aaf27890a20b26c1cd2f10" kindref="member">config::get</ref>(</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dpp::ready_t&amp;<sp/>event)<sp/>-&gt;<sp/>dpp::task&lt;void&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co_await<sp/><ref refid="namespacedb_1a7cba5870abb1d49fe0f9fe17dd8ef15f" kindref="member">db::co_transaction</ref>([event]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/><ref refid="namespacedb_1a8e64d322c430542846327f26e9d00ff6" kindref="member">db::query</ref>(</highlight><highlight class="stringliteral">&quot;SELECT<sp/>current<sp/>FROM<sp/>data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedb_1a8e64d322c430542846327f26e9d00ff6" kindref="member">db::query</ref>(</highlight><highlight class="stringliteral">&quot;UPDATE<sp/>data<sp/>SET<sp/>previous<sp/>=<sp/>?&quot;</highlight><highlight class="normal">,<sp/>{<sp/>rs[0].at(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">)<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedb_1a8a004a2115b829e9f7258f4f65fcbe0b" kindref="member">db::init</ref>(bot);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(dpp::st_wait);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef>
</doxygen>
