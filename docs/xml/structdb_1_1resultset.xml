<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structdb_1_1resultset" kind="struct" language="C++" prot="public">
    <compoundname>db::resultset</compoundname>
    <includes local="no">database.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdb_1_1resultset_1a86664b2b52696b3732e21453851dae5b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedb_1a9a28ec123a44c5f84d5957eb9f5ce96c" kindref="member">row</ref> &gt;</type>
        <definition>std::vector&lt;row&gt; db::resultset::rows</definition>
        <argsstring></argsstring>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Row values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="49" column="13" bodyfile="database.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdb_1_1resultset_1ad28608b9530c9de5cb0b9f1b87a7e785" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string db::resultset::error</definition>
        <argsstring></argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Error message of last query or an empty string on success </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="54" column="13" bodyfile="database.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdb_1_1resultset_1a389e90d46194b5d1bc34ea7f878f75cc" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t db::resultset::affected_rows</definition>
        <argsstring></argsstring>
        <name>affected_rows</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of affected rows, if an UPDATE, DELETE, INSERT </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="59" column="8" bodyfile="database.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdb_1_1resultset_1a2fdff6a05bd78d7128aebc04fe73dab0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool db::resultset::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the query succeeded <simplesect kind="return"><para>true if no error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="65" column="14" bodyfile="database.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1a8a006c3139a16c2e3b07d68dfe85fb87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacedb_1a9a28ec123a44c5f84d5957eb9f5ce96c" kindref="member">row</ref> &amp;</type>
        <definition>const row&amp; db::resultset::operator[]</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a row by index <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>row to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>row </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="74" column="19" bodyfile="database.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1a50bb1893834affc727cfef157b45c629" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacedb_1a9a28ec123a44c5f84d5957eb9f5ce96c" kindref="member">row</ref> &amp;</type>
        <definition>const row&amp; db::resultset::at</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a row by index with range checking <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>row to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>row </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="83" column="19" bodyfile="database.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1af55948e04805ad63260dda313ffa6a17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void db::resultset::emplace_back</definition>
        <argsstring>(const row &amp;r)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>const <ref refid="namespacedb_1a9a28ec123a44c5f84d5957eb9f5ce96c" kindref="member">row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Emplace a new row <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="91" column="13" bodyfile="database.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1a028a9421200bdbf595e7d403f216988a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void db::resultset::push_back</definition>
        <argsstring>(const row &amp;r)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="namespacedb_1a9a28ec123a44c5f84d5957eb9f5ce96c" kindref="member">row</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push back a new row <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="99" column="13" bodyfile="database.h" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1a4d375d8a0ae6689604445ba3a8cc50b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto db::resultset::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the start iterator of the container, for iteration <simplesect kind="return"><para>beginning of container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="108" column="14" bodyfile="database.h" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1af93c2af8068d3e2476184a43913d495f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto db::resultset::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the end iterator of the container, for iteration <simplesect kind="return"><para>end of container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="117" column="14" bodyfile="database.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1aff83375461c2464d3b1f112e45732e09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool db::resultset::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the recordset is empty <simplesect kind="return"><para>true if empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="125" column="14" bodyfile="database.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structdb_1_1resultset_1a059b07133dfb34008790a954666d3d35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t db::resultset::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of rows in the recordset <simplesect kind="return"><para>row count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="database.h" line="133" column="16" bodyfile="database.h" bodystart="133" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definition of a result set. Supports iteration and accessing its rows via operator[] and <ref refid="structdb_1_1resultset_1a50bb1893834affc727cfef157b45c629" kindref="member">at()</ref>. You can also insert new rows with emplace_back and <ref refid="structdb_1_1resultset_1a028a9421200bdbf595e7d403f216988a" kindref="member">push_back()</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>size_t</label>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="7">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::vector&lt; row &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; row &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>db::resultset</label>
        <link refid="structdb_1_1resultset"/>
        <childnode refid="2" relation="usage">
          <edgelabel>affected_rows</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>rows</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>error</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::string</label>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="database.h" line="44" column="1" bodyfile="database.h" bodystart="44" bodyend="136"/>
    <listofallmembers>
      <member refid="structdb_1_1resultset_1a389e90d46194b5d1bc34ea7f878f75cc" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>affected_rows</name></member>
      <member refid="structdb_1_1resultset_1a50bb1893834affc727cfef157b45c629" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>at</name></member>
      <member refid="structdb_1_1resultset_1a4d375d8a0ae6689604445ba3a8cc50b0" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>begin</name></member>
      <member refid="structdb_1_1resultset_1af55948e04805ad63260dda313ffa6a17" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>emplace_back</name></member>
      <member refid="structdb_1_1resultset_1aff83375461c2464d3b1f112e45732e09" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>empty</name></member>
      <member refid="structdb_1_1resultset_1af93c2af8068d3e2476184a43913d495f" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>end</name></member>
      <member refid="structdb_1_1resultset_1ad28608b9530c9de5cb0b9f1b87a7e785" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>error</name></member>
      <member refid="structdb_1_1resultset_1a2fdff6a05bd78d7128aebc04fe73dab0" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>ok</name></member>
      <member refid="structdb_1_1resultset_1a8a006c3139a16c2e3b07d68dfe85fb87" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>operator[]</name></member>
      <member refid="structdb_1_1resultset_1a028a9421200bdbf595e7d403f216988a" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>push_back</name></member>
      <member refid="structdb_1_1resultset_1a86664b2b52696b3732e21453851dae5b" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>rows</name></member>
      <member refid="structdb_1_1resultset_1a059b07133dfb34008790a954666d3d35" prot="public" virt="non-virtual"><scope>db::resultset</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
